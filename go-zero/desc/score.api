syntax = "v1"

info(
  title: "score"
  desc: "score"
  athor: "yama"
  version: "v1.0"
)

type Score {
  Id uint64 `json:"id"`
  UserId uint64 `json:"user_id"`
  GroupId uint64 `json:"group_id"`
  Score int64 `json:"score"`
  SubjectId uint64 `json:"subject_id"`
  CreateId uint64 `json:"create_id"`
  CreateTime int64 `json:"create_time"`
  UpdateId uint64 `json:"update_id"`
  UpdateTime int64 `json:"update_time"`
}

type (
  ScoreListFilter {
    UserId uint64 `json:"user_id,optional"`
    GroupId uint64 `json:"group_id,optional"`
    SubjectId uint64 `json:"subject_id,optional"`
  }
  ScoreListRequest {
    PageNum int64 `json:"page_num"`
    PageSize int64 `json:"page_size"`
    Filters *ScoreListFilter `json:"filter,optional"`
  }
  ScoreListResponse {
    Total int64 `json:"total"`
    PageNum int64 `json:"page_num"`
    List []*Score `json:"list"`
  }
)

type (
  CreateScoreRequest {
    UserId uint64 `json:"user_id"`
    GroupId uint64 `json:"group_id"`
    Score int64 `json:"score"` 
    SubjectId uint64 `json:"subject_id"`
  }
  CreateScoreResponse {
    Id uint64 `json:"id"`
  }
)

type (
  UpdateScoreRequest {
    Id uint64 `json:"id"`
    Score int64 `json:"score"`
    UserId uint64 `json:"user_id"`
    GroupId uint64 `json:"group_id"`
    SubjectId uint64 `json:"subject_id"`
  }
  UpdateScoreResponse {
  }
)

type (
  DeleteScoreRequest {
    Id uint64 `json:"id"`
  }
  DeleteScoreResponse {
  }
)

type (
  ScoreDetailRequest {
    Id uint64 `path:"id"`
  }
)