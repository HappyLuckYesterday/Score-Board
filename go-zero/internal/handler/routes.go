// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	group "board/internal/handler/group"
	score "board/internal/handler/score"
	subject "board/internal/handler/subject"
	subscribe "board/internal/handler/subscribe"
	user "board/internal/handler/user"
	"board/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				// create group
				Method:  http.MethodPost,
				Path:    "/group/create",
				Handler: group.CreateGroupHandler(serverCtx),
			},
			{
				// delete group
				Method:  http.MethodPost,
				Path:    "/group/delete",
				Handler: group.DeleteGroupHandler(serverCtx),
			},
			{
				// get group detail
				Method:  http.MethodGet,
				Path:    "/group/detail/:id",
				Handler: group.GetGroupDetailHandler(serverCtx),
			},
			{
				// get group list
				Method:  http.MethodPost,
				Path:    "/group/list",
				Handler: group.GetGroupListHandler(serverCtx),
			},
			{
				// update group
				Method:  http.MethodPost,
				Path:    "/group/update",
				Handler: group.UpdateGroupHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.JwtAuth.AccessSecret),
		rest.WithPrefix("/board/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// create score
				Method:  http.MethodPost,
				Path:    "/score/create",
				Handler: score.CreateScoreHandler(serverCtx),
			},
			{
				// delete score
				Method:  http.MethodPost,
				Path:    "/score/delete",
				Handler: score.DeleteScoreHandler(serverCtx),
			},
			{
				// get score detail
				Method:  http.MethodGet,
				Path:    "/score/detail/:id",
				Handler: score.GetScoreDetailHandler(serverCtx),
			},
			{
				// get score list
				Method:  http.MethodPost,
				Path:    "/score/list",
				Handler: score.GetScoreListHandler(serverCtx),
			},
			{
				// update score
				Method:  http.MethodPost,
				Path:    "/score/update",
				Handler: score.UpdateScoreHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.JwtAuth.AccessSecret),
		rest.WithPrefix("/board/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// create subject
				Method:  http.MethodPost,
				Path:    "/subject/create",
				Handler: subject.CreateSubjectHandler(serverCtx),
			},
			{
				// delete subject
				Method:  http.MethodPost,
				Path:    "/subject/delete",
				Handler: subject.DeleteSubjectHandler(serverCtx),
			},
			{
				// get subject detail
				Method:  http.MethodGet,
				Path:    "/subject/detail/:id",
				Handler: subject.GetSubjectDetailHandler(serverCtx),
			},
			{
				// get subject list
				Method:  http.MethodPost,
				Path:    "/subject/list",
				Handler: subject.GetSubjectListHandler(serverCtx),
			},
			{
				// update subject
				Method:  http.MethodPost,
				Path:    "/subject/update",
				Handler: subject.UpdateSubjectHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.JwtAuth.AccessSecret),
		rest.WithPrefix("/board/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// create subscribe
				Method:  http.MethodPost,
				Path:    "/subscribe/create",
				Handler: subscribe.CreateSubscribeHandler(serverCtx),
			},
			{
				// delete subscribe
				Method:  http.MethodPost,
				Path:    "/subscribe/delete",
				Handler: subscribe.DeleteSubscribeHandler(serverCtx),
			},
			{
				// get subscribe detail
				Method:  http.MethodGet,
				Path:    "/subscribe/detail/:id",
				Handler: subscribe.GetSubscribeDetailHandler(serverCtx),
			},
			{
				// get subscribe list
				Method:  http.MethodPost,
				Path:    "/subscribe/list",
				Handler: subscribe.GetSubscribeListHandler(serverCtx),
			},
			{
				// update subscribe
				Method:  http.MethodPost,
				Path:    "/subscribe/update",
				Handler: subscribe.UpdateSubscribeHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.JwtAuth.AccessSecret),
		rest.WithPrefix("/board/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// login
				Method:  http.MethodPost,
				Path:    "/user/login",
				Handler: user.LoginHandler(serverCtx),
			},
			{
				// register
				Method:  http.MethodPost,
				Path:    "/user/register",
				Handler: user.RegisterHandler(serverCtx),
			},
		},
		rest.WithPrefix("/board/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// add user
				Method:  http.MethodPost,
				Path:    "/user/add",
				Handler: user.AddUserHandler(serverCtx),
			},
			{
				// delete user
				Method:  http.MethodPost,
				Path:    "/user/delete",
				Handler: user.DeleteUserHandler(serverCtx),
			},
			{
				// get user detail
				Method:  http.MethodGet,
				Path:    "/user/detail",
				Handler: user.GetUserDetailByUserIdHandler(serverCtx),
			},
			{
				// get user detail
				Method:  http.MethodGet,
				Path:    "/user/detail/:id",
				Handler: user.GetUserDetailHandler(serverCtx),
			},
			{
				// get user list
				Method:  http.MethodPost,
				Path:    "/user/list",
				Handler: user.GetUserListHandler(serverCtx),
			},
			{
				// user name list
				Method:  http.MethodGet,
				Path:    "/user/namelist",
				Handler: user.GetUserNameListHandler(serverCtx),
			},
			{
				// update user password
				Method:  http.MethodPut,
				Path:    "/user/password",
				Handler: user.UpdateUserPasswordHandler(serverCtx),
			},
			{
				// update user
				Method:  http.MethodPost,
				Path:    "/user/update",
				Handler: user.UpdateUserHandler(serverCtx),
			},
			{
				// update user detail
				Method:  http.MethodPut,
				Path:    "/user/updatedetail",
				Handler: user.UpdateUserDetailHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.JwtAuth.AccessSecret),
		rest.WithPrefix("/board/api/v1"),
	)
}
