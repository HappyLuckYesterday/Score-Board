// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	subjectFieldNames          = builder.RawFieldNames(&Subject{})
	subjectRows                = strings.Join(subjectFieldNames, ",")
	subjectRowsExpectAutoSet   = strings.Join(stringx.Remove(subjectFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	subjectRowsWithPlaceHolder = strings.Join(stringx.Remove(subjectFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	subjectModel interface {
		Insert(ctx context.Context, data *Subject) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*Subject, error)
		Update(ctx context.Context, data *Subject) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultSubjectModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Subject struct {
		Id          uint64    `db:"id"`
		Name        string    `db:"name"`
		Description string    `db:"description"`
		DueDate     time.Time `db:"due_date"`
		Score       int64     `db:"score"`
		Accept      string    `db:"accept"`
		CreateTime  time.Time `db:"create_time"`
		CreateId    uint64    `db:"create_id"`
	}
)

func newSubjectModel(conn sqlx.SqlConn) *defaultSubjectModel {
	return &defaultSubjectModel{
		conn:  conn,
		table: "`subject`",
	}
}

func (m *defaultSubjectModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultSubjectModel) FindOne(ctx context.Context, id uint64) (*Subject, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", subjectRows, m.table)
	var resp Subject
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSubjectModel) Insert(ctx context.Context, data *Subject) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, subjectRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Name, data.Description, data.DueDate, data.Score, data.Accept, data.CreateId)
	return ret, err
}

func (m *defaultSubjectModel) Update(ctx context.Context, data *Subject) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, subjectRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Name, data.Description, data.DueDate, data.Score, data.Accept, data.CreateId, data.Id)
	return err
}

func (m *defaultSubjectModel) tableName() string {
	return m.table
}
